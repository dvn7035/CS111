Name: David Nguyen
UCLA ID: 304177673


-------------------------------------------------------------------------------

Response to Exercise 1:

Yes the sys_getpid() call will have the correct value since in the 
INT_SYS_GETPID clause you have already saved the current pid in the eax 
register. Although schedule() might execute a process that overwrites eax 
later, schedule() does context switching which restores any registers that
the other processes might have changed.

Response to Exercise 2:
Refer to do_fork() and copy_stack().


Response to Exercise 3:

I added an extra field in the process_t structure called
p_waiting which holds the id of a process so that every
process will have a pid of a process that has called 
sys_wait() on it. If no processes are waiting then the value
will be 0.

When a process calls sys_wait() it will change it's status to P_BLOCKED
and update the p_waiting field of the process it is waiting on. Schedule()
when called will ignore the waiting, blocked process.

If two processes call sys_wait on the same pid, then only only one of the 
processes will be able to wait for it while the other process will be returned
the value -1.

Respnse to Exercise 4: 
The reason why processes were not being reaped was because when a process was
finished and called sys_exit() the process status was set to P_ZOMBIE and not
P_EMPTY. 

Anything else you'd like us to know:



Extra credit exercises:
